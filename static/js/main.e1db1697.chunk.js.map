{"version":3,"sources":["components/Header.tsx","actions/index.ts","utils/index.ts","containers/AddForm.tsx","containers/Search.tsx","App.tsx","containers/EditForm.tsx","EditCustomer.tsx","serviceWorker.ts","reducers/index.ts","sagas/index.ts","index.tsx"],"names":["Header","className","style","marginTop","to","ADD_CUSTOMER","SEARCH_CUSTOMER","REFRESH_SEARCH","DELETE_CUSTOMER","EDIT_CUSTOMER","refreshSearch","type","generateID","Date","now","toString","Math","random","substr","toLowerCase","AddForm","state","customer","id","firstName","lastName","dateOfBirth","this","setState","onSubmit","e","preventDefault","props","onAddCustomer","resetForm","placeholder","value","onChange","target","required","Component","ConnectedAddForm","connect","dispatch","payload","addCustomer","Search","keywordRef","React","createRef","onDispatchSearch","i","chunks","result","length","push","slice","ref","size","onKeyDown","key","current","trim","onClick","map","tiles","idx0","tile","idx1","toDateString","onDispatchDelete","bind","ConnectedSearch","keyword","searchCustomer","deleteCustomer","App","EditForm","customerToEdit","customers","find","item","customerID","Error","onEditCustomer","history","defaultValue","toISOString","split","ConnectedEditForm","editCustomer","EditCustomer","match","params","Boolean","window","location","hostname","initialState","handleAddDeleteCustomer","rootSaga","takeEvery","put","all","sagaMiddleware","createSagaMiddleware","store","createStore","action","newResult","_","filter","search","newCustomers","splice","findIndex","newCustomer","newCusomters","toEditIndex","applyMiddleware","run","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAGe,SAASA,IACtB,OACE,yBAAKC,UAAU,mBAAmBC,MAAO,CAAEC,UAAW,KACpD,yBAAKF,UAAU,wBACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,SAAb,yBACA,kBAAC,IAAD,CAAMA,UAAU,oBAAoBG,GAAG,KAAvC,W,oDCFGC,EAAe,eACfC,EAAkB,kBAClBC,EAAiB,iBACjBC,EAAkB,kBAClBC,EAAgB,gBAgBtB,SAASC,IACd,MAAO,CAAEC,KAAMJ,GC5BV,IAAMK,EAAa,WACxB,OACEC,KAAKC,MAAMC,SAAS,IACpBC,KAAKC,SACFF,SAAS,IACTG,OAAO,EAAG,IACbC,e,6jBCKEC,E,2MACJC,MAAQ,CACNC,SAAU,CACRC,GAAIX,IACJY,UAAW,GACXC,SAAU,GACVC,YAAa,IAAIb,O,2EAKnBc,KAAKC,SAAS,CACZN,SAAU,CACRC,GAAIX,IACJY,UAAW,GACXC,SAAU,GACVC,YAAa,IAAIb,U,+BAKb,IAAD,OACP,OACE,0BACEgB,SAAU,SAAAC,GACRA,EAAEC,iBACF,EAAKC,MAAMC,cAAc,EAAKZ,MAAMC,UACpC,EAAKY,cAGP,yBAAKjC,UAAU,SACb,2BAAOA,UAAU,SAAjB,cACA,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVU,KAAK,OACLwB,YAAY,aACZC,MAAOT,KAAKN,MAAMC,SAASE,UAC3Ba,SAAU,SAAAP,GACR,EAAKF,SAAS,CACZN,SAAS,EAAD,GACH,EAAKD,MAAMC,SADR,CAENE,UAAWM,EAAEQ,OAAOF,WAI1BG,UAAQ,MAId,yBAAKtC,UAAU,SACb,2BAAOA,UAAU,SAAjB,aACA,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVU,KAAK,OACLwB,YAAY,YACZC,MAAOT,KAAKN,MAAMC,SAASG,SAC3BY,SAAU,SAAAP,GACR,EAAKF,SAAS,CACZN,SAAS,EAAD,GACH,EAAKD,MAAMC,SADR,CAENG,SAAUK,EAAEQ,OAAOF,WAIzBG,UAAQ,MAId,yBAAKtC,UAAU,SACb,2BAAOA,UAAU,SAAjB,iBACA,yBAAKA,UAAU,WACb,2BACEU,KAAK,OACL0B,SAAU,SAAAP,GACR,EAAKF,SAAS,CACZN,SAAS,EAAD,GACH,EAAKD,MAAMC,SADR,CAENI,YAAa,IAAIb,KAAKiB,EAAEQ,OAAOF,gBAO3C,yBAAKnC,UAAU,SACb,yBAAKA,UAAU,WACb,2BAAOA,UAAU,iBAAiBU,KAAK,SAASyB,MAAM,e,GAxF5CI,aA2GPC,EALUC,YACvB,KAPyB,SAACC,GAC1B,MAAO,CACLV,cAAe,SAACX,GAAD,OAAwBqB,EFhGpC,SAAqBrB,GAC1B,MAAO,CACLX,KAAMN,EACNuC,QAAStB,GE6FuCuB,CAAYvB,OAIvCoB,CAGvBtB,GCrGI0B,E,2MACIC,WAAaC,IAAMC,Y,mFAGzBtB,KAAKK,MAAMkB,iBAAiB,M,+BAGpB,IAEJC,EAFG,OACHC,EAAS,GAEb,IAAKD,EAAI,EAAGA,EAAIxB,KAAKK,MAAMqB,OAAOC,OAAQH,GAnB1B,EAoBdC,EAAOG,KAAK5B,KAAKK,MAAMqB,OAAOG,MAAML,EAAGA,EApBzB,IAsBhB,OACE,oCACE,6BAASlD,UAAU,WACjB,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,WACX,2BACEA,UAAU,QACVU,KAAK,OACLwB,YAAY,6BACZsB,IAAK9B,KAAKoB,WACVW,KAAM,GACNC,UAAW,SAAA7B,GACK,UAAVA,EAAE8B,KAGN,EAAKb,WAAWc,SACd,EAAK7B,MAAMkB,iBACT,EAAKH,WAAWc,QAAQzB,MAAM0B,YAKxC,uBAAG7D,UAAU,WACX,4BACEA,UAAU,oBACV8D,QAAS,SAAAjC,GACP,EAAKiB,WAAWc,SACd,EAAK7B,MAAMkB,iBACT,EAAKH,WAAWc,QAAQzB,MAAM0B,UALtC,eAgBV,6BAAS7D,UAAU,WAChBmD,EAAOY,IAAI,SAACC,EAAOC,GAClB,OACE,yBAAKjE,UAAU,mBAAmB2D,IAAG,gBAAWM,IAC7CD,EAAMD,IAAI,SAACG,EAAMC,GAChB,OACE,yBACEnE,UAAS,4BAAuB,GAChC2D,IAAG,eAAUM,EAAV,YAAkBE,IAErB,yBAAKnE,UAAU,qBACb,6BACE,2BAAOA,UAAU,SAAjB,aACA,6BACGkE,EAAK3C,UADR,OACyB2C,EAAK1C,WAGhC,6BACE,2BAAOxB,UAAU,SAAjB,iBACA,6BAAMkE,EAAKzC,YAAY2C,iBAEzB,yBAAKpE,UAAU,cACb,kBAAC,IAAD,CACEA,UAAU,iBACVG,GAAE,gBAAW+D,EAAK5C,KAFpB,QADF,OAQE,4BACEtB,UAAU,mBACV8D,QAAS,EAAK/B,MAAMsC,iBAAiBC,KACnC,EAAKvC,MACLmC,EAAK5C,KAJT,wB,GAnFLiB,aA6HNgC,EALS9B,YAdM,SAACrB,GAC7B,MAAO,CACLoD,QAASpD,EAAMoD,QACfpB,OAAQhC,EAAMgC,SAIS,SAACV,GAC1B,MAAO,CACLO,iBAAkB,SAACuB,GAAD,OAAqB9B,EH9GpC,SAAwB8B,GAC7B,MAAO,CACL9D,KAAML,EACNsC,QAAS6B,GG2GuCC,CAAeD,KAC/DH,iBAAkB,SAAC/C,GAAD,OAAgBoB,EHpG/B,SAAwBpB,GAC7B,MAAO,CACLZ,KAAMH,EACNoC,QAASrB,GGiGkCoD,CAAepD,OAItCmB,CAGtBI,GC/Ga8B,EApBO,WACpB,OACE,yBAAK3E,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,aACb,kBAACD,EAAD,QAGJ,yBAAKC,UAAU,WACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,UCCJ4E,E,YAQJ,WAAY7C,GAAqB,IAAD,uBAC9B,4CAAMA,KARR8C,eAA2B,CACzBvD,GAAI,GACJC,UAAW,GACXC,SAAU,GACVC,YAAa,IAAIb,MAKjB,IAAMS,EAAW,EAAKU,MAAM+C,UAAUC,KACpC,SAAAC,GAAI,OAAIA,EAAK1D,KAAO,EAAKS,MAAMkD,aAEjC,IAAK5D,EACH,MAAM,IAAI6D,MAAM,oCANY,OAS9B,EAAKL,eAAevD,GAAKD,EAASC,GAClC,EAAKuD,eAAetD,UAAYF,EAASE,UACzC,EAAKsD,eAAerD,SAAWH,EAASG,SACxC,EAAKqD,eAAepD,YAAc,IAAIb,KACpCS,EAASI,YAAY2C,gBAbO,E,sEAiBtB,IAAD,OACP,OACE,0BACExC,SAAU,SAAAC,GACRA,EAAEC,iBAEF,EAAKC,MAAMoD,eAAe,EAAKN,gBAC/B,EAAK9C,MAAMqD,QAAQ9B,KAAK,OAG1B,yBAAKtD,UAAU,SACb,2BAAOA,UAAU,SAAjB,cACA,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVU,KAAK,OACLwB,YAAY,aACZI,UAAQ,EACR+C,aAAc3D,KAAKmD,eAAetD,UAClCa,SAAU,SAAAP,GACR,EAAKgD,eAAetD,UAAYM,EAAEQ,OAAOF,WAKjD,yBAAKnC,UAAU,SACb,2BAAOA,UAAU,SAAjB,aACA,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVU,KAAK,OACLwB,YAAY,YACZI,UAAQ,EACR+C,aAAc3D,KAAKmD,eAAerD,SAClCY,SAAU,SAAAP,GACR,EAAKgD,eAAerD,SAAWK,EAAEQ,OAAOF,WAKhD,yBAAKnC,UAAU,SACb,2BAAOA,UAAU,SAAjB,iBACA,yBAAKA,UAAU,WACb,2BACEU,KAAK,OACL2E,aACE3D,KAAKmD,eAAepD,YAAY6D,cAAcC,MAAM,KAAK,GAE3DnD,SAAU,SAAAP,GACR,EAAKgD,eAAepD,YAAc,IAAIb,KAAKiB,EAAEQ,OAAOF,YAK5D,yBAAKnC,UAAU,SACb,yBAAKA,UAAU,WACb,2BAAOA,UAAU,iBAAiBU,KAAK,SAASyB,MAAM,gB,GAjF3CI,aA0GRiD,EALW/C,YAZF,SAACrB,GACvB,MAAO,CACL0D,UAAW1D,EAAM0D,YAIM,SAACpC,GAC1B,MAAO,CACLyC,eAAgB,SAAC9D,GAAD,OAAwBqB,ELhFrC,SAAsBrB,GAC3B,MAAO,CACLX,KAAMF,EACNmC,QAAStB,GK6EwCoE,CAAapE,OAIxCoB,CAGxBmC,GCnGac,EApBgB,SAAC3D,GAC9B,OACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,aACb,kBAACD,EAAD,QAGJ,yBAAKC,UAAU,WACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEiF,WAAYlD,EAAM4D,MAAMC,OAAOtE,GAC/B8D,QAASrD,EAAMqD,cCNPS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2D,glBCDN,IAAMM,EAAsB,CAC1BzB,QAAS,GACTM,UAAW,GACX1B,OAAQ,I,wCCjBO8C,G,WASQC,GATlB,SAAUD,IAAV,gEACL,OADK,SACCE,YAAUhG,EAAD,SAAe,6EAC5B,OAD4B,SACtBiG,YAAI5F,KADkB,yCADzB,OAIL,OAJK,SAIC2F,YAAU7F,EAAD,SAAkB,6EAC/B,OAD+B,SACzB8F,YAAI5F,KADqB,yCAJ5B,sCASQ,SAAU0F,IAAV,gEACb,OADa,SACPG,YAAI,CAACJ,MADE,sC,YCITK,EAAiBC,cAEjBC,EAAQC,YFKC,WAGZ,IAFDtF,EAEA,uDAFe6E,EACfU,EACA,uCACA,OAAQA,EAAOjG,MACb,KAAKN,EACH,OAAO,KACFgB,EADL,CAEE0D,UAAU,GAAD,mBAAM1D,EAAM0D,WAAZ,CAAwB6B,EAA6BhE,YAElE,KAAKtC,EACH,IAAMuG,EAAYC,IAAEC,OAAO1F,EAAM0D,UAAW,SAAAzD,GAC1C,OACEA,EAASE,UAAUwF,OAAQJ,EAA4BhE,UACrD,GACFtB,EAASG,SAASuF,OAAQJ,EAA4BhE,UAAY,IAGtE,OAAO,KACFvB,EADL,CAEEoD,QAAUmC,EAA4BhE,QACtCS,OAAO,YAAKwD,KAGhB,KAAKtG,EACH,IAAMsG,EAAYC,IAAEC,OAAO1F,EAAM0D,UAAW,SAAAzD,GAC1C,OACEA,EAASE,UAAUwF,OAAO3F,EAAMoD,UAAY,GAC5CnD,EAASG,SAASuF,OAAO3F,EAAMoD,UAAY,IAG/C,OAAO,KACFpD,EADL,CAEEgC,OAAO,YAAKwD,KAGhB,KAAKrG,EACH,IAAIyG,EAAY,YAAO5F,EAAM0D,WAO7B,OANAkC,EAAaC,OACXD,EAAaE,UACX,SAAAlC,GAAI,OAAIA,EAAK1D,KAAQqF,EAA4BhE,UAEnD,GAEK,KACFvB,EADL,CAEE0D,UAAWkC,IAGf,KAAKxG,EACH,IAAM2G,EAAeR,EAA6BhE,QAC5CyE,EAAY,YAAOhG,EAAM0D,WACzBuC,EAAcD,EAAaF,UAC/B,SAAAlC,GAAI,OAAIA,EAAK1D,KAAO6F,EAAY7F,KAGlC,OADA8F,EAAaH,OAAOI,EAAa,EAAGF,GAC7B,KAAK/F,EAAZ,CAAmB0D,UAAWsC,IAEhC,QACE,OAAOhG,IEhE4BkG,YAAgBf,IAEzDA,EAAegB,IAAIpB,GAEnBqB,IAASC,OACP,kBAAC,IAAD,CAAUhB,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWjD,IACjC,kBAAC,IAAD,CAAOgD,KAAK,YAAYC,UAAWlC,MAGvCmC,SAASC,eAAe,SH4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e1db1697.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n  return (\n    <div className=\"tile is-ancestor\" style={{ marginTop: 20 }}>\n      <div className=\"tile is-parent is-12\">\n        <div className=\"tile is-child\">\n          <p className=\"title\">Alinta app by Rob Lao</p>\n          <Link className=\"button is-default\" to=\"/\">\n            Home\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  Customer,\n  AddEditActionType,\n  SearchActionType,\n  DeleteActionType\n} from '../types';\n\nexport const ADD_CUSTOMER = 'ADD_CUSTOMER';\nexport const SEARCH_CUSTOMER = 'SEARCH_CUSTOMER';\nexport const REFRESH_SEARCH = 'REFRESH_SEARCH';\nexport const DELETE_CUSTOMER = 'DELETE_CUSTOMER';\nexport const EDIT_CUSTOMER = 'EDIT_CUSTOMER';\n\nexport function addCustomer(customer: Customer): AddEditActionType {\n  return {\n    type: ADD_CUSTOMER,\n    payload: customer\n  };\n}\n\nexport function searchCustomer(keyword: string): SearchActionType {\n  return {\n    type: SEARCH_CUSTOMER,\n    payload: keyword\n  };\n}\n\nexport function refreshSearch() {\n  return { type: REFRESH_SEARCH };\n}\n\nexport function deleteCustomer(id: string): DeleteActionType {\n  return {\n    type: DELETE_CUSTOMER,\n    payload: id\n  };\n}\n\nexport function editCustomer(customer: Customer): AddEditActionType {\n  return {\n    type: EDIT_CUSTOMER,\n    payload: customer\n  };\n}\n","export const generateID = () => {\n  return (\n    Date.now().toString(36) +\n    Math.random()\n      .toString(36)\n      .substr(2, 5)\n  ).toLowerCase();\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addCustomer } from '../actions';\nimport { Customer } from '../types';\nimport { generateID } from '../utils';\nimport './Form.css';\n\ninterface PropsToPass {\n  onAddCustomer: (customer: Customer) => void;\n}\n\nclass AddForm extends Component<PropsToPass> {\n  state = {\n    customer: {\n      id: generateID(),\n      firstName: '',\n      lastName: '',\n      dateOfBirth: new Date()\n    }\n  };\n\n  resetForm() {\n    this.setState({\n      customer: {\n        id: generateID(),\n        firstName: '',\n        lastName: '',\n        dateOfBirth: new Date()\n      }\n    });\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          this.props.onAddCustomer(this.state.customer);\n          this.resetForm();\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\">First Name</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"First Name\"\n              value={this.state.customer.firstName}\n              onChange={e => {\n                this.setState({\n                  customer: {\n                    ...this.state.customer,\n                    firstName: e.target.value\n                  }\n                });\n              }}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <label className=\"label\">Last Name</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"Last Name\"\n              value={this.state.customer.lastName}\n              onChange={e => {\n                this.setState({\n                  customer: {\n                    ...this.state.customer,\n                    lastName: e.target.value\n                  }\n                });\n              }}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <label className=\"label\">Date of Birth</label>\n          <div className=\"control\">\n            <input\n              type=\"date\"\n              onChange={e => {\n                this.setState({\n                  customer: {\n                    ...this.state.customer,\n                    dateOfBirth: new Date(e.target.value)\n                  }\n                });\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <div className=\"control\">\n            <input className=\"button is-link\" type=\"submit\" value=\"Add\" />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAddCustomer: (customer: Customer) => dispatch(addCustomer(customer))\n  };\n};\n\nconst ConnectedAddForm = connect<{}, PropsToPass>(\n  null,\n  mapDispatchToProps\n)(AddForm);\n\nexport default ConnectedAddForm;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { searchCustomer, deleteCustomer } from '../actions';\nimport { Customer, State } from '../types';\nimport { Link } from 'react-router-dom';\n\nconst chunkLength = 4;\n\ninterface PropsToPass {\n  keyword: string;\n  result: Customer[];\n  onDispatchSearch: (keyword: string) => void;\n  onDispatchDelete: (id: string) => void;\n}\n\nclass Search extends Component<PropsToPass> {\n  private keywordRef = React.createRef<HTMLInputElement>();\n\n  componentDidMount() {\n    this.props.onDispatchSearch('');\n  }\n\n  render() {\n    let chunks = [];\n    let i;\n    for (i = 0; i < this.props.result.length; i += chunkLength) {\n      chunks.push(this.props.result.slice(i, i + chunkLength));\n    }\n    return (\n      <>\n        <section className=\"section\">\n          <nav className=\"level\">\n            <div className=\"level-item\">\n              <div className=\"field has-addons\">\n                <p className=\"control\">\n                  <input\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Type anything to search...\"\n                    ref={this.keywordRef}\n                    size={50}\n                    onKeyDown={e => {\n                      if (e.key !== 'Enter') {\n                        return;\n                      }\n                      this.keywordRef.current &&\n                        this.props.onDispatchSearch(\n                          this.keywordRef.current.value.trim()\n                        );\n                    }}\n                  />\n                </p>\n                <p className=\"control\">\n                  <button\n                    className=\"button is-primary\"\n                    onClick={e => {\n                      this.keywordRef.current &&\n                        this.props.onDispatchSearch(\n                          this.keywordRef.current.value.trim()\n                        );\n                    }}\n                  >\n                    Search\n                  </button>\n                </p>\n              </div>\n            </div>\n          </nav>\n        </section>\n        <section className=\"section\">\n          {chunks.map((tiles, idx0) => {\n            return (\n              <div className=\"tile is-ancestor\" key={`tiles-${idx0}`}>\n                {tiles.map((tile, idx1) => {\n                  return (\n                    <div\n                      className={`tile is-parent is-${12 / chunkLength}`}\n                      key={`tile-${idx0}-${idx1}`}\n                    >\n                      <div className=\"tile is-child box\">\n                        <div>\n                          <label className=\"label\">Full Name</label>\n                          <div>\n                            {tile.firstName}&nbsp;{tile.lastName}\n                          </div>\n                        </div>\n                        <div>\n                          <label className=\"label\">Date of Birth</label>\n                          <div>{tile.dateOfBirth.toDateString()}</div>\n                        </div>\n                        <div className=\"is-grouped\">\n                          <Link\n                            className=\"button is-link\"\n                            to={`/edit/${tile.id}`}\n                          >\n                            Edit\n                          </Link>\n                          &nbsp;\n                          <button\n                            className=\"button is-danger\"\n                            onClick={this.props.onDispatchDelete.bind(\n                              this.props,\n                              tile.id\n                            )}\n                          >\n                            Delete\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapSearchStateToProps = (state: State) => {\n  return {\n    keyword: state.keyword,\n    result: state.result\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onDispatchSearch: (keyword: string) => dispatch(searchCustomer(keyword)),\n    onDispatchDelete: (id: string) => dispatch(deleteCustomer(id))\n  };\n};\n\nconst ConnectedSearch = connect(\n  mapSearchStateToProps,\n  mapDispatchToProps\n)(Search);\n\nexport default ConnectedSearch;\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport AddForm from './containers/AddForm';\nimport Search from './containers/Search';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"navbar\">\n        <div className=\"container\">\n          <Header />\n        </div>\n      </div>\n      <div className=\"section\">\n        <div className=\"container\">\n          <AddForm />\n        </div>\n        <div className=\"container\">\n          <Search />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { editCustomer } from '../actions';\nimport { State, Customer } from '../types';\nimport './Form.css';\n\ninterface StateProps {\n  customers: Customer[];\n}\n\ninterface DispatchProps {\n  onEditCustomer: (customer: Customer) => void;\n}\n\ninterface OwnProps {\n  customerID: string;\n  history: any;\n}\n\ntype PropsToPass = StateProps & DispatchProps & OwnProps;\n\nclass EditForm extends Component<PropsToPass> {\n  customerToEdit: Customer = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    dateOfBirth: new Date()\n  };\n\n  constructor(props: PropsToPass) {\n    super(props);\n    const customer = this.props.customers.find(\n      item => item.id === this.props.customerID\n    );\n    if (!customer) {\n      throw new Error('Cannot find the customer to edit');\n    }\n\n    this.customerToEdit.id = customer.id;\n    this.customerToEdit.firstName = customer.firstName;\n    this.customerToEdit.lastName = customer.lastName;\n    this.customerToEdit.dateOfBirth = new Date(\n      customer.dateOfBirth.toDateString()\n    );\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n\n          this.props.onEditCustomer(this.customerToEdit);\n          this.props.history.push('/');\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\">First Name</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"First Name\"\n              required\n              defaultValue={this.customerToEdit.firstName}\n              onChange={e => {\n                this.customerToEdit.firstName = e.target.value;\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <label className=\"label\">Last Name</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"Last Name\"\n              required\n              defaultValue={this.customerToEdit.lastName}\n              onChange={e => {\n                this.customerToEdit.lastName = e.target.value;\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <label className=\"label\">Date of Birth</label>\n          <div className=\"control\">\n            <input\n              type=\"date\"\n              defaultValue={\n                this.customerToEdit.dateOfBirth.toISOString().split('T')[0]\n              }\n              onChange={e => {\n                this.customerToEdit.dateOfBirth = new Date(e.target.value);\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <div className=\"control\">\n            <input className=\"button is-link\" type=\"submit\" value=\"Edit\" />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State): StateProps => {\n  return {\n    customers: state.customers\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any): DispatchProps => {\n  return {\n    onEditCustomer: (customer: Customer) => dispatch(editCustomer(customer))\n  };\n};\n\nconst ConnectedEditForm = connect<StateProps, DispatchProps, {}, State>(\n  mapStateToProps,\n  mapDispatchToProps\n)(EditForm);\n\nexport default ConnectedEditForm;\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport EditForm from './containers/EditForm';\n\nconst EditCustomer: React.FC = (props: any) => {\n  return (\n    <div className=\"App\">\n      <div className=\"navbar\">\n        <div className=\"container\">\n          <Header />\n        </div>\n      </div>\n      <div className=\"section\">\n        <div className=\"container\">\n          <EditForm\n            customerID={props.match.params.id}\n            history={props.history}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EditCustomer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import _ from 'lodash';\nimport {\n  Action,\n  State,\n  Customer,\n  AddEditActionType,\n  SearchActionType,\n  DeleteActionType\n} from '../types';\nimport {\n  ADD_CUSTOMER,\n  REFRESH_SEARCH,\n  SEARCH_CUSTOMER,\n  DELETE_CUSTOMER,\n  EDIT_CUSTOMER\n} from '../actions';\n\nconst initialState: State = {\n  keyword: '',\n  customers: [] as Customer[],\n  result: [] as Customer[]\n};\n\nexport default function alintaReducer(\n  state: State = initialState,\n  action: Action\n) {\n  switch (action.type) {\n    case ADD_CUSTOMER:\n      return {\n        ...state,\n        customers: [...state.customers, (action as AddEditActionType).payload]\n      };\n    case SEARCH_CUSTOMER: {\n      const newResult = _.filter(state.customers, customer => {\n        return (\n          customer.firstName.search((action as SearchActionType).payload) >=\n            0 ||\n          customer.lastName.search((action as SearchActionType).payload) >= 0\n        );\n      });\n      return {\n        ...state,\n        keyword: (action as SearchActionType).payload,\n        result: [...newResult]\n      };\n    }\n    case REFRESH_SEARCH: {\n      const newResult = _.filter(state.customers, customer => {\n        return (\n          customer.firstName.search(state.keyword) >= 0 ||\n          customer.lastName.search(state.keyword) >= 0\n        );\n      });\n      return {\n        ...state,\n        result: [...newResult]\n      };\n    }\n    case DELETE_CUSTOMER: {\n      let newCustomers = [...state.customers];\n      newCustomers.splice(\n        newCustomers.findIndex(\n          item => item.id === (action as DeleteActionType).payload\n        ),\n        1\n      );\n      return {\n        ...state,\n        customers: newCustomers\n      };\n    }\n    case EDIT_CUSTOMER: {\n      const newCustomer = (action as AddEditActionType).payload;\n      const newCusomters = [...state.customers];\n      const toEditIndex = newCusomters.findIndex(\n        item => item.id === newCustomer.id\n      );\n      newCusomters.splice(toEditIndex, 1, newCustomer);\n      return { ...state, customers: newCusomters };\n    }\n    default:\n      return state;\n  }\n}\n","import { all, put, takeEvery } from 'redux-saga/effects';\nimport { ADD_CUSTOMER, DELETE_CUSTOMER, refreshSearch } from '../actions';\n\nexport function* handleAddDeleteCustomer() {\n  yield takeEvery(ADD_CUSTOMER, function*() {\n    yield put(refreshSearch());\n  });\n  yield takeEvery(DELETE_CUSTOMER, function*() {\n    yield put(refreshSearch());\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([handleAddDeleteCustomer()]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport './index.css';\nimport 'bulma/css/bulma.css';\n\nimport App from './App';\nimport EditCustomer from './EditCustomer';\nimport * as serviceWorker from './serviceWorker';\nimport alintaReducer from './reducers';\nimport rootSaga from './sagas';\nimport { Route, BrowserRouter } from 'react-router-dom';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(alintaReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/edit/:id\" component={EditCustomer} />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}